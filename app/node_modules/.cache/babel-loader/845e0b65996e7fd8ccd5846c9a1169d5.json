{"ast":null,"code":"import Vue from 'vue';\nexport { createNamespace } from './create';\nexport { addUnit } from './format/unit';\nexport var inBrowser = typeof window !== 'undefined';\nexport var isServer = Vue.prototype.$isServer; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nexport function noop() {}\nexport function isDef(val) {\n  return val !== undefined && val !== null;\n}\nexport function isFunction(val) {\n  return typeof val === 'function';\n}\nexport function isObject(val) {\n  return val !== null && typeof val === 'object';\n}\nexport function isPromise(val) {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n}\nexport function get(object, path) {\n  var keys = path.split('.');\n  var result = object;\n  keys.forEach(function (key) {\n    var _result$key;\n\n    result = (_result$key = result[key]) != null ? _result$key : '';\n  });\n  return result;\n}\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @function isEmpty\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\n\nexport function isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n\n  if (typeof value !== 'object') {\n    return true;\n  }\n\n  return Object.keys(value).length === 0;\n}","map":{"version":3,"names":["Vue","createNamespace","addUnit","inBrowser","window","isServer","prototype","$isServer","noop","isDef","val","undefined","isFunction","isObject","isPromise","then","catch","get","object","path","keys","split","result","forEach","key","_result$key","isEmpty","value","Object","length"],"sources":["E:/HTML_studying/项目/vue-vant项目-谁是卧底/app/node_modules/vant/es/utils/index.js"],"sourcesContent":["import Vue from 'vue';\nexport { createNamespace } from './create';\nexport { addUnit } from './format/unit';\nexport var inBrowser = typeof window !== 'undefined';\nexport var isServer = Vue.prototype.$isServer; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nexport function noop() {}\nexport function isDef(val) {\n  return val !== undefined && val !== null;\n}\nexport function isFunction(val) {\n  return typeof val === 'function';\n}\nexport function isObject(val) {\n  return val !== null && typeof val === 'object';\n}\nexport function isPromise(val) {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n}\nexport function get(object, path) {\n  var keys = path.split('.');\n  var result = object;\n  keys.forEach(function (key) {\n    var _result$key;\n\n    result = (_result$key = result[key]) != null ? _result$key : '';\n  });\n  return result;\n}\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @function isEmpty\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\n\nexport function isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n\n  if (typeof value !== 'object') {\n    return true;\n  }\n\n  return Object.keys(value).length === 0;\n}"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAO,IAAIC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAAlC;AACP,OAAO,IAAIC,QAAQ,GAAGL,GAAG,CAACM,SAAJ,CAAcC,SAA7B,C,CAAwC;;AAE/C,OAAO,SAASC,IAAT,GAAgB,CAAE;AACzB,OAAO,SAASC,KAAT,CAAeC,GAAf,EAAoB;EACzB,OAAOA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAApC;AACD;AACD,OAAO,SAASE,UAAT,CAAoBF,GAApB,EAAyB;EAC9B,OAAO,OAAOA,GAAP,KAAe,UAAtB;AACD;AACD,OAAO,SAASG,QAAT,CAAkBH,GAAlB,EAAuB;EAC5B,OAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAtC;AACD;AACD,OAAO,SAASI,SAAT,CAAmBJ,GAAnB,EAAwB;EAC7B,OAAOG,QAAQ,CAACH,GAAD,CAAR,IAAiBE,UAAU,CAACF,GAAG,CAACK,IAAL,CAA3B,IAAyCH,UAAU,CAACF,GAAG,CAACM,KAAL,CAA1D;AACD;AACD,OAAO,SAASC,GAAT,CAAaC,MAAb,EAAqBC,IAArB,EAA2B;EAChC,IAAIC,IAAI,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAX;EACA,IAAIC,MAAM,GAAGJ,MAAb;EACAE,IAAI,CAACG,OAAL,CAAa,UAAUC,GAAV,EAAe;IAC1B,IAAIC,WAAJ;;IAEAH,MAAM,GAAG,CAACG,WAAW,GAAGH,MAAM,CAACE,GAAD,CAArB,KAA+B,IAA/B,GAAsCC,WAAtC,GAAoD,EAA7D;EACD,CAJD;EAKA,OAAOH,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,OAAT,CAAiBC,KAAjB,EAAwB;EAC7B,IAAIA,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,IAAP;EACD;;EAED,OAAOC,MAAM,CAACR,IAAP,CAAYO,KAAZ,EAAmBE,MAAnB,KAA8B,CAArC;AACD"},"metadata":{},"sourceType":"module"}